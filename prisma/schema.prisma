// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum MaqStatus {
  ATIVA
  PARADA
  MANUTENCAO
}

// ===== NOVOS ENUMS =====
enum ParadaTipo {
  OPERACIONAL
  NAO_OPERACIONAL
}

enum ParadaCategoria {
  MANUTENCAO_CORRETIVA
  MANUTENCAO_PREVENTIVA
  SETUP_TROCA_FERRAMENTA
  FALTA_MATERIAL
  QUALIDADE_INSPECAO
  AJUSTE_PROCESSO
  ABASTECIMENTO
  LIMPEZA
  ALMOCO
  BANHEIRO
  REUNIAO
  TREINAMENTO
  DDS
  OUTROS_NAO_OPERACIONAL
}

model Tenant {
  id         String    @id @default(cuid())
  name       String    @unique
  logoBase64 String?
  users      User[]
  secoes     Secao[]
  maquinas   Maquina[]
  contatos   Contato[]
  paradas    Parada[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissoes Json?

  @@index([tenantId])
}

model Secao {
  id        String    @id @default(cuid())
  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  nome      String
  descricao String?
  paiId     String?
  pai       Secao?    @relation("SecaoHierarquia", fields: [paiId], references: [id], onDelete: SetNull)
  filhos    Secao[]   @relation("SecaoHierarquia")
  maquinas  Maquina[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([tenantId])
}

model Maquina {
  id            String    @id @default(cuid())
  tenantId      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  codigo        String    @unique
  nome          String
  modelo        String?
  fabricante    String?
  numeroSerie   String?
  dataAquisicao DateTime?
  status        MaqStatus @default(ATIVA)
  secaoId       String?
  secao         Secao?    @relation(fields: [secaoId], references: [id], onDelete: SetNull)
  imagemUrl     String?
  paradas       Parada[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([tenantId, status])
}

model Parada {
  id               String    @id @default(cuid())
  tenantId         String
  tenant           Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  maquinaId        String
  maquina          Maquina   @relation(fields: [maquinaId], references: [id], onDelete: Cascade)
  horaInicio       DateTime
  horaFinalizacao  DateTime?
  motivo           String
  equipeAtuando    String?
  observacao       String?
  tempoIntervencao Int?
  funcionando      Boolean   @default(false)

  // ===== NOVOS CAMPOS =====
  tipo      ParadaTipo       @default(OPERACIONAL)
  categoria ParadaCategoria?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId, horaInicio])
  @@index([maquinaId])
}

model Contato {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  nome     String
  celular  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, celular], name: "tenant_celular")
  @@index([tenantId])
}
